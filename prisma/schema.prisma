// prisma/schema.prisma

// Docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = "postgresql://postgres:postgres@localhost:5432/meu_banco?schema=public"
}

//
// ─────────────────────────────  MODELS  ─────────────────────────────
//

// Modelo central do Multi-tenancy. Cada Empresa é um "inquilino" isolado.
model Empresa {
  id   String @id @default(uuid())
  name String @db.VarChar(120)
  cnpj String @unique @db.Citext

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // RELACIONAMENTOS: Uma empresa tem muitos usuários e muitos condomínios.
  users       User[]
  condominios Condominio[]

  @@index([name])
}

model User {
  id           String  @id @default(uuid())
  email        String  @unique @db.Citext
  name         String? @db.VarChar(120)
  passwordHash String  @db.VarChar(255)
  refreshToken String? @db.Text
  role         Role    @default(USER)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // --- RELAÇÃO MULTI-TENANCY ---
  // O usuário pertence a uma Empresa. Esta é a chave do isolamento de dados.
  empresaId String
  empresa   Empresa @relation(fields: [empresaId], references: [id], onDelete: Restrict, onUpdate: Cascade)

  // --- ÍNDICES ---
  // Essencial para performance em queries filtradas por tenant.
  @@index([empresaId])
}

model Condominio {
  id           String @id @default(uuid())
  name         String @db.VarChar(120)
  cnpj         String? @unique @db.Citext
  address      String @db.VarChar(160)
  neighborhood String @db.VarChar(80)
  city         String @db.VarChar(80)
  state        String @db.VarChar(2) // Ex.: "CE", "SP"
  type         String @db.VarChar(30)
  imageUrl     String? @db.VarChar(255)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // --- RELAÇÃO MULTI-TENANCY ---
  // O condomínio pertence a uma Empresa.
  empresaId String
  empresa   Empresa @relation(fields: [empresaId], references: [id], onDelete: Restrict, onUpdate: Cascade)

  // Auto-referência (pai/filho de condomínio dentro da mesma empresa)
  referenceId  String?
  reference    Condominio?  @relation(name: "CondominioReferencia", fields: [referenceId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  referencedBy Condominio[] @relation(name: "CondominioReferencia")


  // ── ÍNDICES ────────────────────────────────────────────────────────
  @@index([empresaId]) // Essencial para performance
  @@index([city, state])
  @@index([name])
  @@index([referenceId])
}

enum Role {
  USER
  ADMIN // Pode ser admin dentro da sua empresa
  // SUPER_ADMIN // Opcional: Para um admin que gerencia todas as empresas
}
