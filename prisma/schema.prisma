// prisma/schema.prisma

// Docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = "postgresql://postgres:postgres@localhost:5432/meu_banco?schema=public"
}

//
// ─────────────────────────────  MODELS  ─────────────────────────────
//

model Condominio {
  id String @id @default(uuid())

  // Defina tamanhos razoáveis p/ índices ficarem mais eficientes
  name         String  @db.VarChar(120)
  cnpj String? @unique @db.Citext
  address      String  @db.VarChar(160)
  neighborhood String  @db.VarChar(80)
  city         String  @db.VarChar(80)
  state        String  @db.VarChar(2) // Ex.: "CE", "SP"
  type         String  @db.VarChar(30)
  imageUrl     String? @db.VarChar(255)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Auto-referência (pai/filho de condomínio)
  referenceId  String?
  reference    Condominio?  @relation(name: "CondominioReferencia", fields: [referenceId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  referencedBy Condominio[] @relation(name: "CondominioReferencia")

  // Opcional: evita duplicatas exatas por "nome+cidade+estado"
  // @@unique([name, city, state])

  // ── ÍNDICES ────────────────────────────────────────────────────────
  @@index([city, state])
  @@index([state]) // útil se pesquisar só por estado
  @@index([name])
  @@index([referenceId])
}

model User {
  id    String  @id @default(uuid())
  email String @unique @db.Citext
  name  String? @db.VarChar(120)

  // Defina tamanho do hash pra evitar lixo; 60 cobre bcrypt, 95+ cobre argon2id.
  passwordHash String @db.VarChar(255)
  refreshToken String? @db.Text
  
  // Opcional: papéis simples (enum abaixo)
  role Role @default(USER)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // ── Se quiser rastrear autoria dos condomínios, descomente no Condominio também ──
  // condominios Criados Condominio[] @relation("CondominioCreatedBy")
}

enum Role {
  USER
  ADMIN
}
